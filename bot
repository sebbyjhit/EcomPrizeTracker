import requests
from bs4 import BeautifulSoup
import time
import logging
import json
import smtplib
from email.mime.text import MIMEText
from twilio.rest import Client
import statistics

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load configuration
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

def scrape_product_data(url, pages=1):
    product_data = []
    for page in range(1, pages + 1):
        try:
            response = requests.get(f"{url}&page={page}")
            response.raise_for_status()  # Raise an HTTPError for bad responses
            soup = BeautifulSoup(response.text, 'html.parser')
            
            for product in soup.select('.product'):
                name = product.select_one('.product-name').text
                price = product.select_one('.product-price').text
                product_data.append({'name': name, 'price': price})
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching data from {url}: {e}")
            continue
    return product_data

def send_email_notification(product_name, price):
    msg = MIMEText(f"Deal found! {product_name} is now ${price}")
    msg['Subject'] = 'Price Drop Alert'
    msg['From'] = config['email']['from_email']
    msg['To'] = config['email']['to_email']

    try:
        with smtplib.SMTP(config['email']['smtp_server'], config['email']['smtp_port']) as server:
            server.starttls()
            server.login(config['email']['username'], config['email']['password'])
            server.sendmail(config['email']['from_email'], config['email']['to_email'], msg.as_string())
        logging.info(f"Email sent for {product_name} at ${price}")
    except Exception as e:
        logging.error(f"Error sending email: {e}")

def send_sms_notification(product_name, price):
    client = Client(config['twilio']['account_sid'], config['twilio']['auth_token'])
    message = f"Deal found! {product_name} is now ${price}"
    try:
        client.messages.create(
            body=message,
            from_=config['twilio']['from_phone'],
            to=config['twilio']['to_phone']
        )
        logging.info(f"SMS sent for {product_name} at ${price}")
    except Exception as e:
        logging.error(f"Error sending SMS: {e}")

def monitor_price_drops(urls, threshold_price, check_interval, pages=1):
    while True:
        for url in urls:
            products = scrape_product_data(url, pages)
            prices = [float(product['price'].replace('$', '')) for product in products if product['price']]
            if not prices:
                continue
            avg_price = statistics.mean(prices)
            for product in products:
                try:
                    price = float(product['price'].replace('$', ''))
                    if price < avg_price * 0.7:  # Consider it a deal if the price is 30% below the average price
                        logging.info(f"Deal found! {product['name']} is now ${price}")
                        send_email_notification(product['name'], price)
                        send_sms_notification(product['name'], price)
                        # Add additional notification or auto-buy logic here
                except ValueError as e:
                    logging.error(f"Error parsing price for {product['name']}: {e}")
        time.sleep(check_interval)  # Check at the specified interval

# Example usage
monitor_price_drops(config['urls'], config['threshold_price'], config['check_interval'], pages=3)
